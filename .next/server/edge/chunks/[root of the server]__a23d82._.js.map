{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/auth.config.ts"],"sourcesContent":["import GitHub from \"next-auth/providers/github\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\n\r\n// Notice this is only an object, not a full Auth.js instance\r\nexport default {\r\n  providers: [GitHub],\r\n  pages: {\r\n    signIn: \"/signin\",\r\n  },\r\n} satisfies NextAuthConfig;\r\n"],"names":[],"mappings":";;;AAAA;AAAA;;uCAIe;IACb,WAAW;QAAC,qJAAA,CAAA,UAAM;KAAC;IACnB,OAAO;QACL,QAAQ;IACV;AACF"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient };\r\n\r\nexport const prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport authConfig from \"./auth.config\";\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\r\nimport { prisma } from \"./prisma/db\";\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth({\r\n  adapter: PrismaAdapter(prisma),\r\n  session: { strategy: \"jwt\" },\r\n  ...authConfig,\r\n});\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAHA;;;;;AAKO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,4GAAA,CAAA,SAAM;IAC7B,SAAS;QAAE,UAAU;IAAM;IAC3B,GAAG,8GAAA,CAAA,UAAU;AACf"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\nimport { auth } from \"@/auth\";\r\n\r\nconst protectedRoutes = [\r\n  \"/profile\",\r\n  \"/dashboard\",\r\n  \"/middleware\",\r\n  \"/themes\",\r\n  \"/signout\",\r\n  \"/project\",\r\n  \"/experience\",\r\n]; // List of protected routes\r\n\r\nexport default async function middleware(request: NextRequest) {\r\n  const session = await auth();\r\n  const { pathname } = request.nextUrl;\r\n\r\n  const isProtected = protectedRoutes.some((route) =>\r\n    request.nextUrl.pathname.startsWith(route)\r\n  );\r\n\r\n  if (!session && isProtected) {\r\n    const loginUrl = new URL(\"/signin\", request.nextUrl.origin);\r\n    loginUrl.searchParams.set(\"callbackUrl\", pathname); // Save the original path for redirection after login\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIA,MAAM,kBAAkB;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;CACD,EAAE,2BAA2B;AAEf,eAAe,WAAW,OAAoB;IAC3D,MAAM,UAAU,MAAM,CAAA,GAAA,oGAAA,CAAA,OAAI,AAAD;IACzB,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,QACxC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAGtC,IAAI,CAAC,WAAW,aAAa;QAC3B,MAAM,WAAW,IAAI,IAAI,WAAW,QAAQ,OAAO,CAAC,MAAM;QAC1D,SAAS,YAAY,CAAC,GAAG,CAAC,eAAe,WAAW,qDAAqD;QACzG,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoD;AAChE"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}